{"version":3,"sources":["components/Display.jsx","components/Button.jsx","components/Buttons.jsx","components/Control.jsx","components/SetControls.jsx","store/reducer.js","App.js","serviceWorker.js","store/store.js","index.js"],"names":["Display","props","endClass","value","maxValue","className","startValue","errorText","startText","Button","id","disabled","onClick","onSetValue","changeState","resetState","title","Buttons","buttons","Control","errorClass","htmlFor","controlTitle","onSetStartValue","onSetMaxValue","type","SetControls","intitialState","reducer","state","action","map","b","window","App","Number","disableIncButton","disableResButton","incValue","resetIncValue","e","setStartValue","currentTarget","onDisableSetButton","disableSetButton","setMaxValue","setValues","onDisableIncButton","render","React","Component","ConnectedApp","connect","dispatch","setStartValueAC","setMaxValueAC","setValuesAC","disableSetButtonAC","disableIncButtonAC","disableResButtonAC","incValueAC","resetIncValueAC","Boolean","location","hostname","match","store","createStore","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4393604c.chunk.js","sourcesContent":["import React from 'react';\nimport '../App.css';\n\nconst Display = (props) => {\n    let endClass = props.value === +(props.maxValue) ? 'end' : '';\n    return (\n        <div className=\"display\">\n            {props.startValue < 0\n                ? <span className=\"errorText\">{props.errorText}</span>\n                : props.value === 0\n                    ? <span className=\"startText\">{props.startText}</span>\n                    : <span className={endClass}>{props.value}</span>}\n\n        </div>\n    );\n};\n\nexport default Display;\n","import React from 'react';\nimport '../App.css';\n\nconst Button = (props) => {\n    return (\n        <div>\n            <button className=\"btn\"\n                    id={props.id}\n                    disabled={props.disabled}\n                    onClick={ props.onSetValue || props.changeState || props.resetState}>{props.title}</button>\n        </div>\n    );\n};\n\nexport default Button;\n","import React from 'react';\nimport '../App.css';\nimport Button from \"./Button\";\n\nconst Buttons = (props) => {\n    return (\n        <div className=\"buttons\">\n            <Button id={props.buttons[0].id} title={props.buttons[0].title} changeState={props.changeState} disabled={props.buttons[0].disabled}/>\n            <Button id={props.buttons[1].id} title={props.buttons[1].title} resetState={props.resetState} disabled={props.buttons[1].disabled}/>\n        </div>\n    );\n};\n\nexport default Buttons;\n","import React from 'react';\n\nfunction Control(props) {\n    let errorClass = props.startValue < 0 ? 'error' : '';\n    return (\n            <div className=\"set-item\">\n                <label className=\"label\" htmlFor=\"control\"><span>{props.controlTitle}</span>\n                    <input className={errorClass} onClick={props.onSetStartValue || props.onSetMaxValue} type=\"number\"/>\n                </label>\n            </div>\n    )\n}\n\nexport default Control;","import React from 'react'\nimport Control from \"./Control\";\n\nfunction SetControls(props) {\n    return (\n            <div className=\"set-controls\">\n\n                <Control onSetMaxValue={props.onSetMaxValue} controlTitle=\"max value:\"/>\n                <Control onSetStartValue={props.onSetStartValue} startValue={props.startValue} controlTitle=\"start value:\"/>\n\n            </div>\n    )\n}\n\nexport default SetControls;","const SET_START_VALUE = 'SET_START_VALUE';\nconst SET_MAX_VALUE = 'SET_MAX_VALUE';\nconst SET_VALUES = 'SET_VALUES';\nconst DISABLE_SET_BUTTON = 'DISABLE_SET_BUTTON';\nconst DISABLE_INC_BUTTON = 'DISABLE_INC_BUTTON';\nconst DISABLE_RES_BUTTON = 'DISABLE_RES_BUTTON';\nconst INC_VALUE = 'INC_VALUE';\nconst RESET_INC_VALUE = 'RESET_INC_VALUE';\n\nconst intitialState = {\n    value: 0,\n    startValue: 0,\n    startText: 'enter values and press \\'set\\' ',\n    errorText: 'Incorrect value!',\n    maxValue: 0,\n    buttons: [\n        {title: 'inc', disabled: true, id: 1},\n        {title: 'reset', disabled: true, id: 2},\n        {title: 'set', disabled: true, id: 3}\n    ]\n};\n\nconst reducer = (state = intitialState, action) => {\n    switch (action.type) {\n        case SET_START_VALUE:\n            return {\n                ...state,\n                startValue: action.startValue\n            };\n        case SET_MAX_VALUE:\n            return  {\n                ...state,\n                maxValue: action.maxValue\n            };\n        case SET_VALUES:\n            return {\n                ...state,\n                value: action.value\n            };\n        case DISABLE_SET_BUTTON:\n            return {\n                ...state,\n                buttons: state.buttons.map(b => {\n                    if (+(action.value) === 1 && b.id === 3) {\n                        return  {...b, disabled: false}\n                    } else {\n                        return b;\n                    }\n                })\n            };\n        case DISABLE_INC_BUTTON:\n            debugger\n            return {\n                ...state,\n                buttons: state.buttons.map(b => {\n                    if (b.id === 1) {\n                        if (+(state.maxValue) === action.value) {\n                            return {...b, disabled: true}\n                        } else {\n                            return {...b, disabled: false}\n                        }\n                    } else {\n                        return b;\n                    }\n                })\n            };\n        case DISABLE_RES_BUTTON:\n            return {\n                ...state,\n                buttons: state.buttons.map(b => {\n                    if (b.id === 2) {\n                        return {...b, disabled: false}\n                    } else {\n                        return b;\n                    }\n                })\n            };\n        case INC_VALUE:\n            return {\n                ...state,\n                value: action.value\n            };\n        case RESET_INC_VALUE:\n            return  {\n                ...state,\n                value: action.value\n            };\n        default:\n            return state;\n    }\n};\n\nexport const setValuesAC = (value) => {\n    return {type: SET_VALUES, value}\n};\n\nexport const setStartValueAC = (startValue) => {\n    return {type: SET_START_VALUE, startValue}\n};\n\nexport const setMaxValueAC = (maxValue) => {\n    return {type: SET_MAX_VALUE, maxValue}\n};\n\nexport const disableSetButtonAC = (value) => {\n    return {type: DISABLE_SET_BUTTON, value}\n};\n\nexport const disableIncButtonAC = (value) => {\n    return {type: DISABLE_INC_BUTTON, value}\n};\n\nexport const disableResButtonAC = (value) => {\n    return {type: DISABLE_RES_BUTTON, value}\n};\n\nexport const incValueAC = (value) => {\n    return {type: INC_VALUE, value}\n};\n\nexport const resetIncValueAC = (value) => {\n    return {type: RESET_INC_VALUE, value }\n};\n\nexport default reducer;\n\nwindow.state = intitialState;","import React from 'react';\nimport './App.css';\nimport Display from \"./components/Display\";\nimport Buttons from \"./components/Buttons\";\nimport Button from \"./components/Button\";\nimport SetControls from \"./components/SetControls\";\nimport {connect} from \"react-redux\";\nimport {\n    disableIncButtonAC, disableResButtonAC,\n    disableSetButtonAC,\n    incValueAC, resetIncValueAC,\n    setMaxValueAC,\n    setStartValueAC,\n    setValuesAC\n} from \"./store/reducer\";\n\nclass App extends React.Component {\n\n    changeState = () => {\n        let value = this.props.value;\n        value++;\n        if (value >= 1) {\n            if (value === Number(this.props.maxValue)) {\n                this.props.disableIncButton(value)\n            }\n            this.props.disableResButton(value);\n        }\n\n        this.props.incValue(value);\n    };\n\n    resetState = () => {\n        this.props.resetIncValue(this.props.startValue);\n        this.props.disableIncButton(this.props.maxValue);\n    };\n\n    onSetStartValue = (e) => {\n        this.props.setStartValue(e.currentTarget.value);\n        this.onDisableSetButton(e.currentTarget.value)\n    };\n\n    onDisableSetButton = (value) => {\n        this.props.disableSetButton(value);\n    };\n\n    onSetMaxValue = (e) => {\n        this.props.setMaxValue(e.currentTarget.value)\n    };\n\n    onSetValue = () => {\n        this.props.setValues(this.props.startValue);\n        this.onDisableIncButton(this.props.startValue);\n    };\n\n    onDisableIncButton = (value) => {\n        this.props.disableIncButton(value);\n    };\n\n    render = () => {\n\n        return (\n            <div className=\"App\">\n\n                <div className=\"set-counter\">\n\n                    <SetControls onSetStartValue={this.onSetStartValue}\n                                 onSetMaxValue={this.onSetMaxValue}\n                                 startValue={this.props.startValue}/>\n\n                    <div className=\"set-buttons\">\n\n                        <Button onSetValue={this.onSetValue}\n                                id={this.props.buttons[2].id}\n                                title={this.props.buttons[2].title} disabled={this.props.buttons[2].disabled}/>\n\n                    </div>\n                </div>\n\n                <div className=\"main-counter\">\n\n                    <Display value={this.props.value}\n                             startValue={this.props.startValue}\n                             maxValue={this.props.maxValue}\n                             startText={this.props.startText}\n                             errorText={this.props.errorText}/>\n\n                    <Buttons buttons={this.props.buttons}\n                             changeState={this.changeState}\n                             resetState={this.resetState}/>\n\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        value: state.value,\n        startValue: state.startValue,\n        startText: state.startText,\n        errorText: state.errorText,\n        maxValue: state.maxValue,\n        buttons: state.buttons\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        setStartValue: (startValue) => {\n            const action = setStartValueAC(startValue);\n            dispatch(action)\n        },\n        setMaxValue: (maxValue) => {\n            const action = setMaxValueAC(maxValue);\n            dispatch(action)\n        },\n        setValues: (value) => {\n            const action = setValuesAC(value);\n            dispatch(action);\n        },\n        disableSetButton: (value) => {\n            const action = disableSetButtonAC(value);\n            dispatch(action);\n        },\n        disableIncButton: (value) => {\n            const action = disableIncButtonAC(value);\n            dispatch(action)\n        },\n        disableResButton: (value) => {\n            const action = disableResButtonAC(value);\n            dispatch(action)\n        },\n        incValue: (value) => {\n            const action = incValueAC(value);\n            dispatch(action);\n        },\n        resetIncValue: (value) => {\n            const action = resetIncValueAC(value);\n            dispatch(action)\n        }\n    }\n};\n\nconst ConnectedApp = connect(mapStateToProps, mapDispatchToProps)(App);\nexport default ConnectedApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {createStore} from \"redux\";\nimport reducer from \"./reducer\";\n\nconst store = createStore(reducer);\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./store/store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}