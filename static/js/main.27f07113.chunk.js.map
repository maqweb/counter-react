{"version":3,"sources":["components/Display.jsx","components/Button.jsx","components/Buttons.jsx","components/Control.jsx","components/SetControls.jsx","App.js","serviceWorker.js","index.js"],"names":["Display","props","endClass","value","maxValue","className","Button","disabled","onClick","setValue","changeState","resetState","title","Buttons","buttons","Control","htmlFor","controlTitle","setStartValue","setMaxValue","id","type","SetControls","App","state","startValue","disableButtons","setState","buttonsCopy","Number","e","currentTarget","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.27f07113.chunk.js","sourcesContent":["import React from 'react';\nimport '../App.css';\n\nconst Display = (props) => {\n    let endClass = props.value === +(props.maxValue) ? 'end': '';\n    return (\n        <div className=\"display\">\n            <span className={endClass}>{props.value}</span>\n        </div>\n    );\n};\n\nexport default Display;\n","import React from 'react';\nimport '../App.css';\n\nconst Button = (props) => {\n    return (\n        <div>\n            <button className=\"btn\" disabled={props.disabled} onClick={ props.setValue || props.changeState || props.resetState}>{props.title}</button>\n        </div>\n    );\n};\n\nexport default Button;\n","import React from 'react';\nimport '../App.css';\nimport Button from \"./Button\";\n\nconst Buttons = (props) => {\n    return (\n        <div className=\"buttons\">\n            <Button title={props.buttons[0].title} changeState={props.changeState} disabled={props.buttons[0].disabled}/>\n            <Button title={props.buttons[1].title} resetState={props.resetState} disabled={props.buttons[1].disabled}/>\n        </div>\n    );\n};\n\nexport default Buttons;\n","import React from 'react';\n\nfunction Control(props) {\n    return (\n            <div className=\"set-item\">\n                <label htmlFor=\"control\">{props.controlTitle}</label>\n                <input onClick={props.setStartValue || props.setMaxValue} id=\"control\" type=\"number\"/>\n            </div>\n    )\n}\n\nexport default Control;","import React from 'react'\nimport Control from \"./Control\";\n\nfunction SetControls(props) {\n    return (\n            <div className=\"set-controls\">\n\n                <Control setMaxValue={props.setMaxValue} controlTitle=\"max value:\"/>\n                <Control setStartValue={props.setStartValue} controlTitle=\"start value:\"/>\n\n            </div>\n    )\n}\n\nexport default SetControls;","import React from 'react';\nimport './App.css';\nimport Display from \"./components/Display\";\nimport Buttons from \"./components/Buttons\";\nimport Button from \"./components/Button\";\nimport SetControls from \"./components/SetControls\";\n\nclass App extends React.Component {\n\n    state = {\n        value: 0,\n        startValue: 0,\n        maxValue: 0,\n        buttons: [\n            {title: 'inc', disabled: true},\n            {title: 'reset', disabled: true},\n        ]\n    };\n\n    changeState = () => {\n        let value = this.state.value;\n        value++;\n        if (value >= 1) {\n            this.disableButtons(value);\n            if (value <= this.state.maxValue) {\n                this.setState({value: value});\n            }\n        }\n    };\n\n    resetState = () => {\n        let buttonsCopy = [...this.state.buttons];\n        buttonsCopy[0].disabled = false;\n        buttonsCopy[1].disabled = true;\n        this.setState({value: this.state.startValue, buttons: buttonsCopy});\n    };\n\n    disableButtons = (value) => {\n        if (value >= 1) {\n            let buttonsCopy = [...this.state.buttons];\n            buttonsCopy[0].disabled = false;\n            buttonsCopy[1].disabled = false;\n            this.setState({buttons: buttonsCopy});\n            if (value === Number(this.state.maxValue)) {\n                buttonsCopy[0].disabled = true;\n            }\n        }\n    };\n\n    setStartValue = (e) => {\n        this.setState({startValue: e.currentTarget.value})\n    };\n\n    setMaxValue = (e) => {\n        this.setState({maxValue: e.currentTarget.value});\n    };\n\n    setValue = () => {\n        this.disableButtons(this.state.startValue);\n        this.setState({value: this.state.startValue});\n    };\n\n    render() {\n        return (\n                <div className=\"App\">\n\n                    <div className=\"set-counter\">\n\n                        <SetControls setStartValue={this.setStartValue} setMaxValue={this.setMaxValue}/>\n\n                        <div className=\"set-buttons\">\n                            <Button setValue={this.setValue} title=\"set\"/>\n                        </div>\n                    </div>\n\n                    <div className=\"main-counter\">\n                        <Display value={this.state.value} maxValue={this.state.maxValue}/>\n                        <Buttons buttons={this.state.buttons}\n                                 changeState={this.changeState}\n                                 resetState={this.resetState}/>\n                    </div>\n\n\n                </div>\n        );\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}